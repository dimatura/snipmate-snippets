## STL Collections
# std::array
snippet array
	std::array<${1:T}, ${2:N}> ${3};${4}
# std::vector
snippet vec
	std::vector<${1}>
snippet vector
	std::vector<${1:T}> ${2};${3}
# std::deque
snippet deque
	std::deque<${1:T}> ${2};${3}
# std::forward_list
snippet flist
	std::forward_list<${1:T}> ${2};${3}
# std::list
snippet list
	std::list<${1:T}> ${2};${3}
# std::set
snippet set
	std::set<${1:T}> ${2};${3}
# std::map
snippet map
	std::map<${1:Key}, ${2:T}> ${3};${4}
# std::multiset
snippet mset
	std::multiset<${1:T}> ${2};${3}
# std::multimap
snippet mmap
	std::multimap<${1:Key}, ${2:T}> ${3};${4}
# std::unordered_set
snippet uset
	std::unordered_set<${1:T}> ${2};${3}
# std::unordered_map
snippet umap
	std::unordered_map<${1:Key}, ${2:T}> ${3};${4}
# std::unordered_multiset
snippet umset
	std::unordered_multiset<${1:T}> ${2};${3}
# std::unordered_multimap
snippet ummap
	std::unordered_multimap<${1:Key}, ${2:T}> ${3};${4}
# std::stack
snippet stack
	std::stack<${1:T}> ${2};${3}
# std::queue
snippet queue
	std::queue<${1:T}> ${2};${3}
# std::priority_queue
snippet pqueue
	std::priority_queue<${1:T}> ${2};${3}
##
## Access Modifiers
# private
snippet pri
	private
# protected
snippet pro
	protected
# public
snippet pub
	public
# friend
snippet fr
	friend
# mutable
snippet mu
	mutable
##
## Class
# class
snippet cl
	class ${1:} {
	public:
		$1(${2:});
		virtual ~$1();
	private:
		$1 (const $1& other);
		$1& operator=(const $1& other);
		${3}
	};${4}
# member function implementation
snippet mfun
	${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
		${5}
	}
# namespace
snippet ns
	namespace ${1}
	{
		${2}
	}
##
## Input/Output
# std::cout
snippet cout
	std::cout << ${1}
# std::cerr
snippet cerr
	std::cerr << ${1}
# std::cin
snippet cin
	std::cin >> ${1};${2}
##
## Iteration
# for i
snippet fori
	for (${1}::iterator ${2:itr} = ${3:}.begin();
		${4:$2} != ${5:$3}.end();
		++${6:$2}) {
		${7}
	}${8}
# foreach
snippet fore
	for (${1:auto} ${2:i} : ${3:container}) {
		${4}
	}${5}
snippet dbg
	std::cerr << "${1:} = " << ${2:$1} << std::endl;${3}
# iterator
snippet iter
	for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
		${6}
	}${7}

# auto iterator
snippet itera
	for (auto ${1:i} = $1.begin(); $1 != $1.end(); ++$1) {
		${2:std::cout << *$1 << std::endl;}
	}${3}
##
## Lambdas
# lamda (one line)
snippet ld
	[${1}](${2}){${3}}${4}
# lambda (multi-line)
snippet lld
	[${1}](${2}){
		${3}
	}${4}
# opencv
snippet cvm
	cv::Mat
snippet cvm_
	cv::Mat_<${1}> ${2}
# eigen
snippet eim
	Eigen::Matrix
snippet eim_
	Eigen::Matrix<${1:type}, ${2:rows}, ${3:cols}> ${4}
snippet eiv
	Eigen::Vector
snippet std
	std::
# boost
snippet b
	boost::
snippet boost
	boost::
snippet bg
	begin()
snippet end
	end()
snippet sz
	size_t
snippet .
	::
snippet pcl
	pcl::
snippet pclc
	pcl::console::print_
snippet cr
	"\n"
snippet using
	using namespace ${1}
snippet scast
	static_cast<${1}>()
snippet it
	iterator
snippet opio
	std::ostream& operator<<(std::ostream& os, const ${1})${2}
snippet enum
	enum ${1:MyEnum} {
		${2}
	};${3}
snippet ositer
	std::copy(${1:}.begin(), ${2:}.end(), std::ostream_iterator<${3}>(${4:std::cout}, ${5:" "});${6:}
# boost format
snippet bformat
	boost::format("${1:}%1%${2:}")%${3:};${4:}
# boost foreach
snippet bfor
	BOOST_FOREACH(${1}, ${2}) {
		${3}
	}${4}
